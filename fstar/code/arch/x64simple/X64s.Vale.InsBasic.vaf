include{:fstar}{:open} "Types_s"
include{:fstar}{:open} "Arch.Types"
include{:fstar}{:open} "X64.Machine_s"
include{:fstar}{:open} "X64s.Vale.State"
include{:fstar}{:open} "X64s.Vale.Decls"

module X64s.Vale.InsBasic

#verbatim{:interface}
open Defs_s
open Types_s
open Arch.Types
open X64.Machine_s
open X64s.Vale.State
open X64s.Vale.Decls
#endverbatim

#verbatim
open FStar.Mul
open X64.Machine_s
open X64s.Vale
open X64s.Vale.State
open X64s.Vale.StateLemmas
open X64s.Vale.Decls
friend X64s.Vale.Decls
module S = X64.Semantics_s
module P = X64.Print_s
#reset-options "--initial_fuel 2 --max_fuel 2 --z3rlimit 20"
#endverbatim

var ok:bool {:state ok()};
var rax:nat64 {:state reg(Rax)};
var rbx:nat64 {:state reg(Rbx)};
var rcx:nat64 {:state reg(Rcx)};
var rdx:nat64 {:state reg(Rdx)};
var rsi:nat64 {:state reg(Rsi)};
var rdi:nat64 {:state reg(Rdi)};
var rbp:nat64 {:state reg(Rbp)};
var rsp:nat64 {:state reg(Rsp)};
var r8:nat64 {:state reg(R8)};
var r9:nat64 {:state reg(R9)};
var r10:nat64 {:state reg(R10)};
var r11:nat64 {:state reg(R11)};
var r12:nat64 {:state reg(R12)};
var r13:nat64 {:state reg(R13)};
var r14:nat64 {:state reg(R14)};
var r15:nat64 {:state reg(R15)};
var efl:nat64 {:state flags()};
var mem:memory {:state mem()};

operand_type reg_opr64:nat64 @ operand :=
| inout rax | inout rbx | inout rcx | inout rdx
| inout rsi | inout rdi | inout rbp | inout r8
| inout r9 | inout r10 | inout r11 | inout r12
| inout r13 | inout r14 | inout r15
;
operand_type shift_amt64:nat64 := in rcx | const;
operand_type Mem64(in base:reg_opr64, inline offset:int):nat64;
operand_type dst_opr64:nat64 @ operand := reg_opr64 | Mem64;
operand_type opr64:nat64 := dst_opr64 | const;

procedure Mov64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.Mov64(dst,src))}
    ensures
        dst == old(src);
{
}

procedure Add64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.Add64(dst,src))}
    modifies
        efl;
    requires
        src + dst < pow2_64;
    ensures
        dst == old(dst + src);
{
}

procedure Add64Wrap(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.Add64(dst,src))}
    modifies
        efl;
    ensures
        dst == old(add_wrap64(dst, src));
        cf(efl) == old(dst + src >= pow2_64);
{
}

procedure AddLea64(out dst:dst_opr64, in src1:opr64, in src2:opr64)
    {:public}
    {:instruction Ins(S.AddLea64(dst, src1, src2))}
    requires
        src1 + src2 < pow2_64;
    ensures
        dst == old(src1) + old(src2);
{
}

procedure Adc64Wrap(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.AddCarry64(dst, src))}
    modifies
        efl;
    ensures
        dst == old(add_wrap64(add_wrap64(dst, src), (if cf(efl) then 1 else 0)));
        cf(efl) == old(dst + src + (if cf(efl) then 1 else 0)) >= pow2_64;
{
}

procedure Adcx64Wrap(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.Adcx64(dst, src))}
    modifies
        efl;
    ensures
        dst == old(add_wrap64(add_wrap64(dst, src), (if cf(efl) then 1 else 0)));
        efl == update_cf(old(efl), old(dst + src + (if cf(efl) then 1 else 0)) >= pow2_64);
{
}

procedure Adox64Wrap(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.Adox64(dst, src))}
    modifies
        efl;
    ensures
        dst == old(add_wrap64(add_wrap64(dst, src), (if overflow(efl) then 1 else 0)));
        efl == update_of(old(efl), old(dst + src + (if overflow(efl) then 1 else 0)) >= pow2_64);
{
}

procedure Sub64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.Sub64(dst, src))}
    requires
        0 <= dst - src;
    modifies
        efl;
    ensures
        dst == old(dst) - old(src);
{
}

procedure Sub64Wrap(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.Sub64(dst, src))}
    modifies
        efl;
    ensures
        dst == old(dst - src) % pow2_64;
{
}

#verbatim
#restart-solver
#push-options "--max_fuel 0 --max_ifuel 0 --using_facts_from 'Prims FStar.UInt'"
let lemma_fundamental_div_mod (a b:nat64) :
  Lemma (pow2_64 * (FStar.UInt.mul_div #64 a b) + (FStar.UInt.mul_mod #64 a b) == a * b)
  =
  FStar.Math.Lemmas.lemma_div_mod (a * b) pow2_64
#pop-options
#endverbatim

ghost procedure lemma_fundamental_div_mod(ghost a:nat64, ghost b:nat64) {:public} extern;

procedure Mul64Wrap(in src:opr64)
    {:public}
    {:instruction Ins(S.Mul64(src))}
    modifies
        efl;
        rax;
        rdx;
    ensures
        pow2_64 * rdx + rax == old(rax * src);
{
    lemma_fundamental_div_mod(old(rax), old(src));
}

procedure Mulx64(out dst_hi:reg_opr64, out dst_lo:reg_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.Mulx64(dst_hi, dst_lo, src))}
    requires @dst_hi != @dst_lo;
    reads
        rdx;
    ensures
        pow2_64 * dst_hi + dst_lo == old(rdx * src);
{
    lemma_fundamental_div_mod(old(rdx), old(src));
}

procedure IMul64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.IMul64(dst, src))}
    requires
        0 <= dst * src < pow2_64;
    modifies
        efl;
    ensures
        dst == old(dst * src);
{
}

procedure Xor64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.Xor64(dst, src))}
    modifies
        efl;
    ensures
        dst == old(ixor64(dst,src));
        !overflow(efl);
        !cf(efl);
{
}

procedure And64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:instruction Ins(S.And64(dst, src))}
    modifies
        efl;
    ensures
        dst == old(iand64(dst,src));
{
}

procedure Shl64(inout dst:dst_opr64, in amt:shift_amt64)
    {:public}
    {:instruction Ins(S.Shl64(dst, amt))}
    modifies
        efl;
    ensures
        dst == old(ishl64(dst, amt));
{
}

procedure Shr64(inout dst:dst_opr64, in amt:shift_amt64)
    {:public}
    {:instruction Ins(S.Shr64(dst, amt))}
    modifies
        efl;
    ensures
        dst == old(ishr64(dst, amt));
{
}

